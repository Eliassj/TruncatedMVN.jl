import{_ as a,c as s,o as i,a6 as t}from"./chunks/framework.IIyXaTQX.js";const u=JSON.parse('{"title":"Internals","description":"","frontmatter":{},"headers":[],"relativePath":"private.md","filePath":"private.md","lastUpdated":null}'),r={name:"private.md"},e=t('<h1 id="Internals" tabindex="-1">Internals <a class="header-anchor" href="#Internals" aria-label="Permalink to &quot;Internals {#Internals}&quot;">​</a></h1><p>Documentation for internal functions.</p><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="TruncatedMVN.lnNormalProb-Union{Tuple{T}, Tuple{T, T}} where T" href="#TruncatedMVN.lnNormalProb-Union{Tuple{T}, Tuple{T, T}} where T">#</a> <b><u>TruncatedMVN.lnNormalProb</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lnNormalProb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b)</span></span></code></pre></div><p>Accurately compute <code>ln(P(a&lt;Z&lt;b))</code> <code>where Z~N(0,1)</code>.</p><p><a href="https://github.com/Eliassj/TruncatedMVN.jl/blob/50784a1a7422a9c911b0397165bd33ad62626d87/src/TruncatedMVN.jl#L425-L429" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="TruncatedMVN.mvnrnd!-Tuple{AbstractArray, AbstractArray, TruncatedMVNormal, Vararg{AbstractArray, 4}}" href="#TruncatedMVN.mvnrnd!-Tuple{AbstractArray, AbstractArray, TruncatedMVNormal, Vararg{AbstractArray, 4}}">#</a> <b><u>TruncatedMVN.mvnrnd!</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mvnrnd!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(z</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, logpr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TruncatedMVNormal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, mu</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, L</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lb</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Generates samples from a normal distribution.</p><p><a href="https://github.com/Eliassj/TruncatedMVN.jl/blob/50784a1a7422a9c911b0397165bd33ad62626d87/src/TruncatedMVN.jl#L163-L167" target="_blank" rel="noreferrer">source</a></p></div><br>',6),n=[e];function l(d,h,p,o,k,c){return i(),s("div",null,n)}const g=a(r,[["render",l]]);export{u as __pageData,g as default};
